name: "[TEMPLATE] Publish SPAs"

on:
  workflow_call:
    inputs:
      CDN_URL:
        type: string
        required: true
        description: 'The URL of the CDN to publish the SPAs to (e.g. https://d1z2x3c4v5.cloudfront.net)'
      CDN_BUCKET:
        type: string
        required: true
      SPA_PATHS:
        type: string
        required: true
        description: 'A json array of SPA package paths to publish (e.g. ["packages/app1", "packages/app2"])'
      ALPHA_RELEASE:
        type: boolean
        required: false
        description: 'Whether to make the release version alpha'
        default: false
      AWS_REGION:
        type: string
        required: false
        default: 'us-east-1'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
        description: 'AWS Access Key ID'
      AWS_ACCESS_KEY_SECRET:
        required: true
        description: 'AWS Access Key Secret'
    outputs:
      source_map_overrides:
        value: ${{ jobs.coalesce-spa-outputs.outputs.source_map_overrides }}
        description: 'A json object that maps spa package names to their source map override URLs'
    
jobs:
  publish-spa:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        spa_path: ${{ fromJson(inputs.SPA_PATHS) }}
    name: Build/Publish ${{ matrix.spa_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Extract package metadata
        id: extract_package_metadata
        working-directory: ${{ matrix.spa_path }}
        run: |
          PACKAGE_NAME=$(jq -r '.name' package.json)
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Increment alpha version
        id: increment_version
        if: ${{ inputs.ALPHA_RELEASE }}
        run: |
          VERSION=${{ steps.extract_package_metadata.outputs.package_version }}
          ALPHA_RELEASE=${{ inputs.ALPHA_RELEASE }}
          BUILD_IDENTIFIER=${GITHUB_RUN_NUMBER}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          PATCH_VERSION=${VERSION_PARTS[2]}
          NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_VERSION-alpha.${BUILD_IDENTIFIER}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Output package version
        id: output_package_version
        run: |
          if [ -z "${{ steps.increment_version.outputs.new_version }}" ]; then
            echo "package_version=${{ steps.extract_package_metadata.outputs.package_version }}" >> $GITHUB_OUTPUT
          else
            echo "package_version=${{ steps.increment_version.outputs.new_version }}" >> $GITHUB_OUTPUT
          fi

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Build SPA
        working-directory: ${{ matrix.spa_path }}
        run: yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Get new path in bucket
        id: get_new_path
        run: |
          PACKAGE_BUCKET_PATH=${{ steps.extract_package_metadata.outputs.package_name }}/${{ steps.output_package_version.outputs.package_version }}
          echo "package_bucket_path=$PACKAGE_BUCKET_PATH" >> $GITHUB_OUTPUT

      - name: Upload SPA to S3
        run: aws s3 sync ${{ matrix.spa_path }}/ s3://${{ inputs.CDN_BUCKET }}/${{ steps.get_new_path.outputs.package_bucket_path }}

      ## Write for matrix outputs workaround as YAML
      - uses: cloudposse/github-action-matrix-outputs-write@v1
        id: output-results
        with:
          matrix-step-name: "build-spas"
          matrix-key: ${{ matrix.spa_path }}
          outputs: |-
            package_name: "${{ steps.extract_package_metadata.outputs.package_name }}"
            bucket_path: "${{ steps.get_new_path.outputs.package_bucket_path }}"

  coalesce-spa-outputs:
    runs-on: ubuntu-latest
    needs: publish-spa
    name: Coalesce SPA outputs
    outputs:
      source_map_overrides: ${{ steps.create_importmap_overrides.outputs.source_map_overrides }}
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@v1
        id: read
        with:
          matrix-step-name: "build-spas"

      - name: Create importmap overrides
        id: create_importmap_overrides
        run: |
            overrides=$(jq -n '${{ steps.read.outputs }} as $object | $object.package_name | to_entries | map({key: .value, value: $object.bucket_path[.key]}) | from_entries' -c)
            echo "source_map_overrides=$overrides" >> $GITHUB_OUTPUT
            echo "Output: $overrides"